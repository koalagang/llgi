#!/usr/bin/env bash

# This directory is temporary. It will be moved to a more permanent spot at a later release (before llgi leaves alpha or beta).
pack_mgr_dir="./data/packaging-methods"
desktop_entries_dir="./data/desktop-entries"

# Check if the respective package managers are installed
is_pkgmgr_installed (){
    if [ -n "$(command -v $1)" ]; then
        pkg_prefs="$pkg_prefs $1"
    else
        echo "llgi: error: $1 not installed" && exit 0
    fi ;}

# All the flags
while getopts 'vFASNa:dC:c:' OPT; do
  case "$OPT" in
    v) echo 'llgi version: ALPHA' && exit 0 ;;
    F) is_pkgmgr_installed 'flatpak' ;;
    A) is_pkgmgr_installed 'zap' ;;
    S) is_pkgmgr_installed 'snap' ;;
    N) pkg_prefs="$pkg_prefs native-$parent_distro" ;;
    a)
        if [ -n "$(command -v $OPTARG)" ]; then
            echo "Preferred AUR helper set to: $OPTARG" && aur_helper="$OPTARG"
        else
            echo "llgi: error: $OPTARG not installed" && exit 0
        fi ;;
    d) # Set preferred tool for root access as doas instead of using sudo
        if [ -n "$(command -v 'doas')" ]; then
            echo 'Preferred root access command set to: doas' && export root_cmd='doas'
        else
            echo 'llgi: error: doas not installed' && exit 0
        fi ;;
    C)
        if [ -n "$(test -r $OPTARG)" ]; then
            config="$OPTARG"
        else
            printf 'llgi: error: specified config file does not exist\nReverting to default.\n'
        fi ;;
    c)
        if [ -n "$(test -r $OPTARG)" ]; then
            cache="$OPTARG"
        else
            printf 'llgi: error: specified config file does not exist\nReverting to default.\n'
        fi ;;
  esac
done

# Just a warning to make sure that the user is fully aware that they are responsible for any breakages.
printf "WARNING: just as you would with running any other script, you are hereby granting llgi permission to modify your system.\nBy continuing you accept that if your system breaks as a result of this, it is YOUR OWN RESPONSIBILITY.\nTIP: make regular backups of important files.\n\n"
while true; do
    read -p 'Do you wish to continue? [y/N] ' yn
    case "$yn" in
        [Yy]* ) printf 'llgi: option entered: yes\nContinuing script.\n' && break ;;
        [Nn]* ) printf '\nllgi: option entered: no\nScript cancelled.\n' && exit 0 ;;
        '') printf '\nllgi: option entered: no\nScript cancelled.\n' && exit 0 ;;
        * ) echo 'Please answer "yes" or "no".'
    esac
done


# Set root access tool to sudo if '-d' flag has not been parsed
[ -z "$root_cmd" ] && export root_cmd='sudo'
[ -z "$config" ] && export config="$XDG_CONFIG_HOME/llgi" && mkdir -p "$config"
[ -z "$cache" ] && export cache="$XDG_CACHE_HOME/llgi" && mkdir -p "$cache"

# TODO: add automatic installation of non-native package managers
[ -z "$pkg_prefs" ] && printf 'llgi: packaging preference not set:\nreverting to default\n'
case "$parent_distro" in
    'arch') pkg_prefs='native zap' ;;
    'ubuntu')
        if [ "$distro" = 'Linux Mint' ] || [ "$distro" = 'Pop!_OS' ]; then
            pkg_prefs='native flatpak zap'
        else
            pkg_prefs='native snap zap'
        fi ;;
    'fedora') pkg_prefs='native flatpak zap'
export pkg_prefs=($pkg_prefs)

# Exit if using an Arch-based distribution and an AUR helper has not been specified
[ "$parent_distro" = 'arch' ] && [ -z "$aur_helper" ] && printf 'llgi: error: no AUR helper specified\nPlease specify an AUR helper with the `-a` flag\nNOTE: the AUR helper must be capable of acting as a pacman wrapper and using the same flags (i.e. -Syu)\n' && exit 0

# Distro check
distro="$(grep -w 'NAME' /etc/os-release | cut -d'"' -f2)" && export distro
echo "Distributon detected as $distro."
[ -n "$(command -v 'dnf')" ] && parent_distro='fedora'
[ -n "$(command -v 'apt')" ] && parent_distro='ubuntu'
[ -n "$(command -v 'pacman')" ] && parent_distro='arch'
[ -z "$parent_distro" ] && echo 'llgi: error: your Linux distribution is not supported' && exit 0

echo 'Upgrading packages...'
[ "$parent_distro" = 'arch' ] && $aur_helper -Syu --noconfirm
[ "$parent_distro" = 'ubuntu' ] && $root_cmd apt update && $root_cmd apt upgrade -y
[ "$parent_distro" = 'fedora' ] && $root_cmd dnf upgrade --refresh -y

# Dependency check
deps=('git' 'wget' 'curl' 'unzip' 'tar' 'make' 'xdotool' 'wmctrl' 'bc')
echo "${deps[@]}" | sed 's/ /\n/g' | xargs -I% -n 1 sh -c 'command -v "%" >/dev/null || echo "error: missing dependency: %" | tee "/tmp/llgi-missing-deps"'
[ -e '/tmp/llgi-missing-deps' ] && echo 'Installing missing llgi dependencies...' && rm '/tmp/llgi-missing-deps' &&
    case "$parent_distro" in
        'arch') $root_cmd pacman -S "${deps[@]}" --needed --noconfirm ;;
        'ubuntu') $root_cmd apt install "${deps[@]}" -y ;;
        'fedora') $root_cmd dnf install "${deps[@]}" -y
    esac

bak (){; echo "Backing up $1..." && $root_cmd cp --backup=numbered $1 $1.bak ;}

# Source the config file because some software requires special treatment
# (can't simply be installed as a single package from the repos).
# These are not included in the package lists (native-arch, snap, flatpak, etc.).
source "$config/llgi.conf"

wine_install (){
    echo 'Installing wine...'
    case "$parent_distro" in
        'arch') $root_cmd pacman -S wine-staging giflib lib32-giflib libpng lib32-libpng libldap lib32-libldap gnutls lib32-gnutls \
                mpg123 lib32-mpg123 openal lib32-openal v4l-utils lib32-v4l-utils libpulse lib32-libpulse libgpg-error \
                lib32-libgpg-error alsa-plugins lib32-alsa-plugins alsa-lib lib32-alsa-lib libjpeg-turbo lib32-libjpeg-turbo \
                sqlite lib32-sqlite libxcomposite lib32-libxcomposite libxinerama lib32-libgcrypt libgcrypt lib32-libxinerama \
                ncurses lib32-ncurses opencl-icd-loader lib32-opencl-icd-loader libxslt lib32-libxslt libva lib32-libva gtk3 \
                lib32-gtk3 gst-plugins-base-libs lib32-gst-plugins-base-libs vulkan-icd-loader lib32-vulkan-icd-loader wine-mono --needed --noconfirm ;;
        'ubuntu') $root_cmd apt install wine64 wine32 libasound2-plugins:i386 libsdl2-2.0-0:i386 libdbus-1-3:i386 libsqlite3-0:i386 mono-complete -y ;;
        'fedora') $root_cmd dnf install wine wine-mono -y
        esac
    winecfg &
    sleep 5
    xdotool mousemove -w "$(echo "ibase=16; $(wmctrl -l | grep 'Wine configuration' | cut -c 3-11 | tr a-z A-Z)" | bc)" 200 425 click 1
}

# drivers and vulkan
drivers (){
    [[ "$nvidia_495" -eq 1 ]] && driver_vendor='nvidia'
    [[ "$nvidia_390" -eq 1 ]] && driver_vendor='nvidia'
    [[ "$nvidia_340" -eq 1 ]] && driver_vendor='nvidia'
    [[ "$amd" -eq 1 ]] && driver_vendor='amd'
    [[ "$intel" -eq 1 ]] && driver_vendor='intel'
    case "$parent_distro" in
        'arch')
            # nvidia_pkg='nvidia-lts'
            # $root_cmd pacman -S "$nvidia_pkg"-dkms "$nvidia_pkg"-utils lib32-"$nvidia_pkg"-utils "$nvidia_pkg"-settings nvidia-prime opencl-"$nvidia_pkg" lib32-opencl-"$nvidia_pkg"
            if [ "$driver_vendor" = 'nvidia' ]; then
                [ "$(uname -r)" =~ 'lts' ] && kernel='lts'
                if [[ "$nvidia_495" -eq 1 ]]; then
                    [ "$kernel" = 'lts' ] && nvidia_pkg='nvidia-lts'
                    [ "$kernel" != 'lts' ] && nvidia_pkg='nvidia'
                    all_nvidia_pkgs="$nvidia_pkgs nvidia-dkms nvidia-utils lib32-nvidia-utils nvidia-settings nvidia-prime"
                elif [[ "$nvidia_390" -eq 1 ]]; then
                    nvidia_pkg='nvidia-390xx'
                    nvidia_pkgs='nvidia-390xx nvidia-390xx-dkms nvidia-390xx-utils lib32-nvidia-390xx-utils nvidia-390xx-settings'
                elif [[ "$nvidia_340" -eq 1 ]]; then
                    [ "$kernel" = 'lts' ] && nvidia_pkgs='nvidia-340xx nvidia-340xx-lts-dkms nvidia-340xx-utils lib32-nvidia-340xx-utils nvidia-340xx-settings'
                    [ "$kernel" != 'lts' ] && nvidia_pkgs='nvidia-340xx nvidia-340xx-dkms nvidia-340xx-utils lib32-nvidia-340xx-utils nvidia-340xx-settings'
                fi
                $root_cmd pacman -S "$nvidia_pkgs" vulkan-icd-loader lib32-vulkan-icd-loader --needed --noconfirm
            elif [ "$driver_vendor" = 'amd' ]; then
                $root_cmd pacman -S lib32-mesa vulkan-radeon lib32-vulkan-radeon vulkan-icd-loader lib32-vulkan-icd-loader --needed --noconfirm
            elif [ "$driver_vendor" = 'intel' ]; then
                $root_cmd pacman -S lib32-mesa vulkan-intel lib32-vulkan-intel vulkan-icd-loader lib32-vulkan-icd-loader --needed --noconfirm
            fi ;;
        'ubuntu')
            if [ "$driver_vendor" = 'nvidia' ]; then
                $root_cmd add-apt-repository ppa:graphics-drivers/ppa -y && $root_cmd apt update
                [[ "$nvidia_495" -eq 1 ]] && $root_cmd apt install nvidia-driver-495 libvulkan1 libvulkan1:i386 -y
                [[ "$nvidia_390" -eq 1 ]] && $root_cmd apt install nvidia-driver-390 libvulkan1 libvulkan1:i386 -y
                [[ "$nvidia_340" -eq 1 ]] && $root_cmd apt install nvidia-340 libvulkan1 libvulkan1:i386 -y
            else
                $root_cmd add-apt-repository ppa:kisak/kisak-mesa -y && $root_cmd apt update &&
                    $root_cmd apt install libgl1-mesa-dri:i386 mesa-vulkan-drivers mesa-vulkan-drivers:i386 -y
            fi ;;
        'fedora')
            if [ "$driver_vendor" = 'nvidia' ]; then
                [[ "$nvidia_495" -eq 1 ]] && nvidia_pkg='akmod-nvidia'
                [[ "$nvidia_390" -eq 1 ]] && nvidia_pkg='xorg-x11-drv-nvidia-390xx akmod-nvidia-390xx'
                [[ "$nvidia_340" -eq 1 ]] && nvidia_pkg='xorg-x11-drv-nvidia-340xx akmod-nvidia-340xx'
                $root_cmd dnf config-manager --set-enabled rpmfusion-nonfree-nvidia-driver
                $root_cmd install "$nvidia_pkg" vulkan-loader vulkan-loader.i686 -y
            else
                $root_cmd dnf install vulkan-loader vulkan-loader.i686 -y
            fi
    esac
}

libraries (){
    case "$parent_distro"in
        'arch') $root_cmd pacman -S sdl2 lib32-libbsd libbsd lib32-openal openal --noconfirm --needed ;;
        'ubuntu') $root_cmd apt install libsdl2-dev libbsd-dev libopenal-dev -y ;;
        'fedora') $root_cmd dnf install SDL2.i686 SDL2.x86_64 libbsd.i686 libbsd.x86_64 openal-soft.i686 openal.x84_64 -y
    esac
}
# Mini functions
# These are here to help me to stay dry (don't repeat yourself) with the fallback function.
requires_fallback (){; [[ "$1" -eq 1 ]] && [ -n "$(grep "$1" "$cache/not-installable")" ] && sed -i "/$1/d" "$cache/not-installable" ;}
ppa_install (){; requires_fallback "$2" && $root_cmd add-apt-repository "ppa:$1" -y && export ppa_pkgs="$ppa_pkgs $2" ;}
deb_install (){; requires_fallback "$2" && echo "Downloading $2 deb file..." && wget -q --show-progress "$1" -O "$cache/$2.deb" && $root_cmd dpkg -i "$cache/$2.deb" ;}
download_extract_tar (){; requires_fallback "$2" && wget -q --show-progress "$1" -O "$cache/$2.tar.gz" && tar xf "$cache/$2.tar.gz" -C "$cache" ;}
install_zip (){
    requires_fallback "$2" || return
    mkdir -p "$cache/$2"
    wget -q --show-progress "$1" -O "$cache/$2/$2.zip"
    unzip "$cache/$2/$2.zip" -d "$cache/$2"
    rm "$cache/$2/$2.zip"
    $root_cmd mv "$cache/$2" '/usr/lib'
    $root_cmd cp "$desktop_entries_dir/$2/$2.desktop" '/usr/share/applications'
    $root_cmd mkdir -p "/usr/share/icons/$2" && $root_cmd cp "$desktop_entries/$2/$2-icon.png" "/usr/share/icons/$2"
}
steamtinkerlaunch_install (){
    requires_fallback 'steamtinkerlaunch' || return
    # Install dependencies of yad, as well as tools required to compile yad.
    case "$parent_distro" in
        'ubuntu') $root_cmd apt install xdotool automake libtool libglib2.0-dev intltool libgtksourceview-3.0-dev libwebkit2gtk-4.0-dev libgspell-1-dev -y ;;
        'fedora') $root_cmd dnf install xdotool xprop xrandr automake libtool glib2 intltool gtksourceview3 webkit2gtk3 gspell -y
    esac

    # Yad must be compiled because steamtinkerlaunch requires a version >= 7.2 but Fedora and Ubuntu package older releases
    # Fortunately yad is a very small program so it is quick to compile.
    echo 'Preparing to compile yad...'
    # xxd is a component of vim which steamtinkerlaunch depends on
    git clone 'https://github.com/v1cont/yad.git' "$cache/yad" && sh -c "cd $cache/yad
    libtoolize --copy --force
    autoreconf
    automake --force-missing --add-missing
    intltoolize
    ./configure --prefix=/usr --enable-html --enable-icon-browser --enable-gio --enable-spell --enable-sourceview
    echo 'Compiling yad...'
    make
    $root_cmd make install"
    git clone 'https://github.com/vim/vim.git' "$cache/vim" && make -C "$cache/vim/src/xxd" && sudo mv "$cache/vim/src/xxd/xxd" '/usr/bin'
    git clone 'https://github.com/frostworx/steamtinkerlaunch.git' "$cache/steamtinkerlaunch"
    $root_cmd make install -C "$cache/steamtinkerlaunch"
}


# fallback methods for installing packages if they are not available in native, flatpak, snap or appimage form
# TODO: add a fallback for every single package
fallback (){
    case "$parent_distro" in
        # no need for Arch because it has native access to all the packages
        'ubuntu')
            $root_cmd apt install --no-install-recommends software-properties-common -y
            ppa_install 'lutris-team/lutris' 'lutris'
            ppa_install 'frinsky/airshipper' 'airshipper'
            ppa_install 'ernstp/mesarc' 'corectrl'
            ppa_install 'obsproject/obs-studio' 'obs-studio' && ppa_pkgs="$ppa_pkgs ffmpeg v4l2loopback-dkms "
            # 'ppa:flexiondotorg/mangohud' contains goverlay, mangohud and vkbasalt
            if [[ "$goverlay" -eq 1 ]]; then; $root_cmd add-apt-repository ppa:flexiondotorg/mangohud -y ;
            elif [[ "$mangohud" -eq 1 ]]; then; $root_cmd add-apt-repository ppa:flexiondotorg/mangohud -y ;
            elif [[ "$vkbasalt" -eq 1 ]]; then; $root_cmd add-apt-repository ppa:flexiondotorg/mangohud -y ; fi
            # These were not included in the above if statement because then only one would run,
            # so, by doing it this way, then if multiple are enabled then all can be run
            requires_fallback 'goverlay' && ppa_pkgs="$ppa_pkgs goverlay"
            requires_fallback 'mangohud' && ppa_pkgs="$ppa_pkgs mangohud"
            requires_fallback 'vkbasalt' && ppa_pkgs="$ppa_pkgs vkbasalt"
            requires_fallback 'gamehub' &&  [ "$distro" != 'Pop!_OS' ] && $root_cmd add-apt-repository ppa:tkashkin/gamehub -y
            requires_fallback 'gamehub' && ppa_pkgs="$ppa_pkgs com.github.tkashkin.gamehub"

            deb_install 'https://github.com/Heroic-Games-Launcher/HeroicGamesLauncher/releases/download/v1.11.0-alpha/heroic_1.11.0-alpha_amd64.deb' 'heroic'
            deb_install 'https://github.com/sharkwouter/minigalaxy/releases/download/1.1.0/minigalaxy_1.1.0_all.deb' 'minigalaxy'
            deb_install 'https://launcher.mojang.com/download/Minecraft.deb' 'minecraft'
            deb_install 'https://files.multimc.org/downloads/multimc_1.6-1.deb' 'multimc'
            deb_install 'https://github.com/derrod/legendary/releases/download/0.20.21/python3-legendary-gl_0.20.21-1_all.deb' 'legendary'

            # In some of the below statements, using 'if' is not strictly necessary but I chose to use them because otherwise I would require many '&&'
            # Flashpoint Infinity
            requires_fallback 'flashpoint_infinity' &&
                wget -q --show-progress 'https://bluepload.unstable.life/flashpoint-infinity-8-2-2-amd64-deb.7z' -O "$cache/flashpoint-infinity-8-2-2-amd64.deb.7z" &&
                $root_cmd apt install p7zip-full -y && 7z x "$cache/flashpoint-infinity-8-2-2-amd64.deb.7z" &&
                $root_cmd apt install "$cache/flashpoint-infinity_8.2-2_amd64.deb" -y && $root_cmd apt remove p7zip-full -y && $root_cmd apt autoremove -y

            # Install the ppa packages, along with any missing dependencies of the deb packages
            $root_cmd apt update && $root_cmd apt -f install -y && $root_cmd install "$ppa_pkgs" -y
            ;;
        'fedora')
            # Minecraft
            if [[ "$minecraft_launcher" -eq 1 ]]; then
                download_extract_tar 'https://launcher.mojang.com/download/Minecraft.tar.gz' 'minecraft'
                chmod a+x "$cache/minecraft/minecraft-launcher/minecraft-launcher"
                $root_cmd mv 'minecraft/minecraft-launcher/minecraft-launcher' '/usr/bin' && $root_cmd cp "$desktop_entries_dir/minecraft/minecraft.desktop" '/usr/share/applications'
                $root_cmd mkdir -p '/usr/share/icons/minecraft' && $root_cmd cp "$desktop_entries_dir/minecraft/minecraft-icon.png" '/usr/share/icons/minecraft'
            fi

            # MultiMC
            if [[ "$multimc" -eq 1 ]]; then
                download_extract_tar 'https://files.multimc.org/downloads/mmc-stable-lin64.tar.gz' 'multimc'
                chmod a+x "$cache/multimc/MultiMC"
                $root_cmd mv "$cache/multimc" '/usr/lib'
                $root_cmd cp "$desktop_entries_dir/multimc/multimc.desktop" '/usr/share/applications'
                $root_cmd mkdir -p '/usr/share/icons/MultiMC' && $root_cmd cp "$desktop_entries_dir/multimc/multimc-icon.png" '/usr/share/icons/MultiMC'
            fi

            # Flashpoint Infinity
            [[ "$flashpoint_infinity" -eq 1 ]] && $root_cmd dnf copr enable heartsdo/flashpoint-infinity -y && $root_cmd dnf install flashpoint-infinity -y

            # Airshipper
            [[ "$airshipper" -eq 1 ]] && $root_cmd dnf copr enable frinksy/airshipper -y && $root_cmd dnf install airshipper -y

            # Legendary
            [[ "$legendary" -eq 1 ]] && $root_cmd dnf install python3-pip -y && $root_cmd pip install legendary-gl

            # Steamtinkerlaunch
            steamtinkerlaunch_install
            ;;
    esac

    # rpcs3
    # TODO (?): use zap to install rpcs3 and other app images which aren't on Get Appimages or Appimage Store
    if [[ "$rpcs3" -eq 1 ]]; then
        sh -c "cd $cache && curl -JLO 'https://rpcs3.net/latest-appimage'"
        $root_cmd chmod a+x "$cache"/rpcs3-*_linux64.AppImage
        $root_cmd mv "$cache"/rpcs3-*_linux64.AppImage '/usr/bin/rpcs3'
        $root_cmd cp "$desktop_entries_dir/rpcs3/rpcs3.desktop" '/usr/share/applications'
        $root_cmd mkdir -p '/usr/share/icons/rpcs3' && $root_cmd cp "$desktop_entries_dir/rpcs3/rpcs3-icon.png" '/usr/share/icons/rpcs3'
    fi

    # LiveSplit
    if [[ "$livesplit" -eq 1 ]]; then
        [[ "$wine" -ne 1 ]] && wine_install # install wine if it has not already been installed (livesplit is not natively supported on linux)
        install_zip 'https://github.com/LiveSplit/LiveSplit/releases/download/1.8.16/LiveSplit_1.8.16.zip' 'livesplit'
    fi

    # Scarab
    [[ "$scarab" -eq 1 ]] && install_zip 'https://github.com/fifty-six/Scarab/releases/download/v1.5.0.0/linux.zip' 'scarab'

    # NoiseTorch
    if [[ "$noisetorch" -eq 1 ]]; then
        wget -q --show-progress 'https://github.com/lawl/NoiseTorch/releases/download/0.11.4/NoiseTorch_x64.tgz'
        mkdir "$cache/noisetorch"
        tar -C "$cache/noisetorch" -xzf 'NoiseTorch_x64.tgz' && $root_cmd cp -r "$cache/noisetorch/.local"/* '/usr'
        $root_cmd setcap 'CAP_SYS_RESOURCE=+ep' '/usr/bin/noisetorch'
    fi

    # Itch
    if [[ "$itch" -eq 1 ]]; then
        printf '\nInstalling itch...\nA window will temporarily open and then close itself. Please do not manually close it.'
        wget -q --show-progress 'https://itch.io/app/download?platform=linux' -O "$cache/itch-setup"
        chmod a+x "$cache/itch-setup"
        sh -c "cd $cache && ./itch-setup"
        killall 'itch'
    fi
}

steam_compatibility_tools (){
    if [[ "$boxtron" -eq 1 ]]; then
        requires_fallback 'boxtron' || break
        case "$parent_distro" in
            'ubuntu') $root_cmd apt install dosobox inotify-tools timidity fluid-soundfont-gm -y ;;
            'fedora') $root_cmd dnf install dosbox-staging inotify-tools timidity++ fluid-soundfont-gm -y
        esac
        curl -sL 'https://github.com/dreamer/boxtron/releases/download/v0.5.4/boxtron.tar.xz' -O "$cache/boxtron.tar.xz"
        tar xJf "$cache/boxtron.tar.xz" -C "$HOME/.steam/root/compatibilitytools.d"
    fi

    if [[ "$protonup" -eq 1 ]]; then
        requires_fallback 'protonup' || break
        case "$parent_distro" in
            'ubuntu') $root_cmd apt install python3-pip -y ;;
            'fedora') $root_cmd dnf install python3-pip -y
        esac
        pip install protonup
        [ -z "$(grep -i 'steam' "$cache/to-install-flatpak" )" ] && mkdir -p "$HOME/.steam/root/compatibilitytools.d" && protonup -d "$HOME/.steam/root/compatibilitytools.d"
        [ -n "$(grep -i 'steam')" "$cache/to-install-flatpak" ] &&
            mkdir -p "$HOME/.var/app/com.valvesoftware.Steam/data/Steam/compatibilitytools.d" && protonup -d "$HOME/.var/app/com.valvesoftware.Steam/data/Steam/compatibilitytools.d"
        echo 'Downloading the latest version of ProtonGE...' && protonup -y
        sed -i '/protonup/d' "$cache/not-installable"
    fi

    if [[ "$luxtorpeda" -eq 1 ]]; then
        requires_fallback 'luxtorpeda' || break
        case "$parent_distro" in
            'ubuntu') $root_cmd apt install libssl-dev -y ;;
            'fedora') $root_cmd dnf install openssl-devel
        esac
        git clone 'https://github.com/luxtorpeda-dev/luxtorpeda.git' "$cache/luxtorpeda"
        make -C "$cache/luxtorpeda" user-install
        sed -i '/luxtorpeda/d' "$cache/not-installable"
    fi

    if [[ "$roberta" -eq 1 ]]; then
        requires_fallback 'roberta' || break
        case "$parent_distro" in
            # Roberta is not available on the AUR
            'arch') $root_cmd pacman -S scummvm inotifytools --noconfirm --needed ;;
            'ubuntu') $root_cmd apt install scummvm inotifytools -y ;;
            'fedora') $root_cmd dnf install scummvm inotifytools -y
        esac
        curl -sL 'https://github.com/dreamer/roberta/releases/download/v0.1.0/roberta.tar.xz' -O "$cache/roberta.tar.xz"
        tar xJf "$cache/roberta.tar.xz" -C "$HOME/.steam/root/compatibilitytools.d"
        sed -i '/roberta/d' "$cache/not-installable"
    fi

    # Protonup-qt
    if [[ "$protonup_qt" -eq 1 ]]; then
        requires_fallback 'protonup-qt' || break
        wget 'https://github.com/DavidoTek/ProtonUp-Qt/releases/download/v2.4.1/ProtonUp-Qt-2.4.1-x86_64.AppImage' -O "$cache/protonup-qt"
        $root_cmd chmod a+x "$cache/protonup-qt"
        $root_cmd mv "$cache/protonup-qt" '/usr/bin/protonup-qt'
        $root_cmd cp "$desktop_entries_dir/protonup-qt/protonup-qt.desktop" '/usr/share/applications'
        $root_cmd cp -r "$desktop_entries_dir/protonup-qt/icons" '/usr/share'
    fi
}

check_installable (){
    sed 's/#.*$//g' "$config/llgi.conf" | grep '=1' | cut -d'=' -f1 > "$cache/to-install"

    for pref in "${pkg_prefs[@]}"; do
        cut -d',' -f2 "$pack_mgr_dir/$pref" > "$cache/to-install-$pref-temp"
        cat "$cache/to-install" >> "$cache/to-install-$pref-temp"
        sort "$cache/to-install-$pref-temp" | uniq -d > "$cache/to-install-$pref"
    done

    # remove packages in common which have a lower priority
    # e.g. if the order of priority (descending) is snap, flatpak, zap:
    # if flatpak contains anything which is also in snap, remove it from flatpak
    # if zap contains anything which is in either snap or flatpak, remove it from zap
    # this leaves snap with all the packages which it supports and zap only with the packages which
    # are not supported by snap or flatpak

    cat "$cache/to-install-${pkg_prefs[0]}" > "$cache/installable-temp"

    [ -n "${pkg_prefs[1]}" ] &&
        cp "$cache/to-install-${pkg_prefs[1]}" "$cache/to-install-${pkg_prefs[1]}-temp" &&
        grep -vxf "$cache/to-install-${pkg_prefs[0]}" "$cache/to-install-${pkg_prefs[1]}-temp" > "$cache/to-install-${pkg_prefs[1]}" &&
        cat "$cache/to-install-${pkg_prefs[1]}" >> "$cache/installable-temp"

    [ -n "${pkg_prefs[2]}" ] &&
        cp "$cache/to-install-${pkg_prefs[2]}" "$cache/to-install-${pkg_prefs[2]}-temp" &&
        grep -vxf "$cache/to-install-${pkg_prefs[0]}" "$cache/to-install-${pkg_prefs[2]}-temp" > "$cache/to-install-${pkg_prefs[2]}" &&
        cp "$cache/to-install-${pkg_prefs[2]}" "$cache/to-install-${pkg_prefs[2]}-temp" &&
        grep -vxf "$cache/to-install-${pkg_prefs[1]}" "$cache/to-install-${pkg_prefs[2]}-temp" > "$cache/to-install-${pkg_prefs[2]}" &&
        cat "$cache/to-install-${pkg_prefs[2]}" >> "$cache/installable-temp"

    [ -n "${pkg_prefs[3]}" ] &&
        cp "$cache/to-install-${pkg_prefs[3]}" "$cache/to-install-${pkg_prefs[3]}-temp" &&
        grep -vxf "$cache/to-install-${pkg_prefs[0]}" "$cache/to-install-${pkg_prefs[3]}-temp" > "$cache/to-install-${pkg_prefs[3]}" &&
        cp "$cache/to-install-${pkg_prefs[3]}" "$cache/to-install-${pkg_prefs[3]}-temp" &&
        grep -vxf "$cache/to-install-${pkg_prefs[1]}" "$cache/to-install-${pkg_prefs[3]}-temp" > "$cache/to-install-${pkg_prefs[3]}" &&
        cp "$cache/to-install-${pkg_prefs[3]}" "$cache/to-install-${pkg_prefs[3]}-temp" &&
        grep -vxf "$cache/to-install-${pkg_prefs[2]}" "$cache/to-install-${pkg_prefs[3]}-temp" > "$cache/to-install-${pkg_prefs[3]}" &&
        cat "$cache/to-install-${pkg_prefs[3]}" >> "$cache/installable-temp"

    # create list of packages which cannot be installed
    sort "$cache/installable-temp" > "$cache/installable"
    cp "$cache/to-install" "$cache/to-install-temp"
    sort "$cache/to-install-temp" > "$cache/to-install"
    grep -vxf "$cache/installable" "$cache/to-install" > "$cache/not-installable"
    [[ "$wine" -eq 1 ]] && sed -i '/wine/d' "$cache/not-installable"

    # convert config names to package names
    for pref in "${pkg_prefs[@]}"; do
        cp "$cache/to-install-$pref" "$cache/to-install-$pref-temp"
        grep -f "$cache/to-install-$pref-temp" "$pack_mgr_dir/$pref" | cut -d',' -f1 > "$cache/to-install-$pref"
    done
}

game_scripts (){
    [ -z "$(command -v wine)" ] && wine_install
    if [ -z "$(command -v lutris)" ]; then
        case "$parent_distro" in
            'arch') $root_cmd pacman -S lutris --needed --noconfirm ;;
            'ubuntu') $root_cmd add-apt-repository ppa:lutris-team/lutris -y && $root_cmd apt update && $root_cmd apt install lutris -y ;;
            'fedora') $root_cmd dnf install lutris -y
        esac
    fi
    [[ "$1" -eq 1 ]] && echo "Installing $2..." && lutris lutris:"$1"
}

agnostic_installing (){
    ### FLATPAK ###
    if [[ "$pkg_prefs" =~ 'flatpak' ]]; then
        [ -z "$(command -v 'flatpak')" ] && \
        case "$parent_distro" in
            'arch') $root_cmd pacman -S flatpak --needed --noconfirm ;;
            'ubuntu') $root_cmd add-apt-repository ppa:flatpak/stable -y && $root_cmd apt update && $root_cmd apt install flatpak -y ;;
            'fedora') $root_cmd dnf install flatpak -y
        esac
        $root_cmd flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
        printf '\nInstalling flatpak packages...\n' && readarray -t pkg_list < "$cache/to-install-flatpak" && $root_cmd flatpak install flathub "${pkg_list[@]}" -y
    fi

    ### SNAP ###
    if [[ "$pkg_prefs" =~ 'snap' ]]; then
        [ -z "$(command -v 'snap')" ] && \
        case "$parent_distro" in
            'arch') $root_cmd pacman -S snapd --noconfirm ;;
            'ubuntu') [ "$distro" = 'Linux Mint' ] && $root_cmd rm /etc/apt/preferences.d/nosnap.pref && $root_cmd apt update ; $root_cmd apt install snapd -y ;;
            'fedora') $root_cmd dnf install snapd -y
        esac
        printf '\nInstalling snap packages...\n'
        $root_cmd snap refresh
        [ -n "$(grep -i 'airshipper' "$cache/to-install-snap")" ] && sed -i '/airshipper/d' "$cache/to-install-snap" && $root_cmd snap install airshipper --beta
        readarray -t pkg_list < "$cache/to-install-snap" && $root_cmd snap install "${pkg_list[@]}"
    fi

    ### APP IMAGES ###
    if [[ "$pkg_prefs" =~ 'zap' ]]; then
        [ -z "$(command -v 'zap')" ] &&
            $root_cmd wget 'https://github.com/srevinsaju/zap/releases/download/continuous/zap-amd64 -O /usr/local/bin/zap' && $root_cmd chmod +x /usr/local/bin/zap
        echo 'The rest of the script is interactive. You will have to click through a few menus.'
        read -p 'Press ENTER when you are ready to continue or CTRL+C to cancel the script. '
        # kind of a hacky solution but for some reason it is impossible to loop through zap and you can't use it in a non-interactive mode
        printf '\nInstalling app images...\nPlease interactively select each option\n'
        [ -n "$(grep -i 'heroic' $cache/to-install-zap)" ] && sed -i '/heroic/d' "$cache/to-install-zap" && zap install --github --from 'heroic-games-launcher/heroicgameslauncher'
        [ -n "$(grep -i 'gamehub' $cache/to-install-zap)" ] && sed -i '/gamehub/d' "$cache/to-install-zap" && zap install --github --from 'tkashkin/GameHub'
        sed -i 's/^/zap install /g' "$cache/to-install-zap" && sh "$cache/to-install-zap"
    fi

    ### LUTRIS ###
    if [[ "$lutris" -eq 1 ]]; then
        echo 'IMPORTANT: READ THE BELOW TEXT BEFORE CONTINUING'
        echo 'Please click through the Lutris installation menus.'
        echo 'When the games launcher (e.g. Blizzard app) opens, sign in and install the game then close the app after finishing the installation of that game.'
        echo 'NOTE: even if you chose to install multiple games from the same client - e.g. if you want to install Hearthstone and Overwatch which are both from the Blizzard app,'
        echo 'do not install them in the same window. When it says "Installing Overwatch..." click through and install Overwatch as instructed above and then close the app'
        echo 'and then a Hearthstone installer will open separately for you to repeat the process except this time with Hearthstone. This is because, in order to have the best effect,'
        echo 'Lutris uses per-game tweaking so you will technically have a separate Blizzard client for each game.'
        printf 'Both games with appear in your Lutris library so treat Lutris as your client instead.\n\n'

        read -p 'Press ENTER when you are ready to continue or CTRL+C to cancel the script. '
        echo 'Starting game installation(s)...'
        game_scripts 'overwatch' 'Overwatch'
        game_scripts 'hearthstone' 'Hearthstone'
        game_scripts 'heroes-of-the-storm' 'Heroes of the Storm'
        game_scripts 'magic-the-gathering-arena' 'Magic: The Gathering Arena'
        game_scripts 'gwent' 'Gwent'
        game_scripts 'osu' 'osu!'
        game_scripts 'twitch-app' 'Twitch Launcher'
    fi
}

# https://github.com/lutris/docs/blob/master/HowToEsync.md
esync_enable (){
    [ "$parent_distro" = 'ubuntu' ] &&
        $root_cmd sed -i '/DefaultLimitNOFILE/c DefaultLimitNOFILE=524288' '/etc/systemd/system.conf' &&
        $root_cmd sed -i '/DefaultLimitNOFILE/c DefaultLimitNOFILE=524288' '/etc/systemd/user.conf'

    $root_cmd sed -i "/$USER hard nofile/c $USER hard no file 524288" '/etc/security/limits.conf'
}

[ "$parent_distro" = 'arch' ] && $aur_helper -Syu --noconfirm
[ "$parent_distro" = 'ubuntu' ] && $root_cmd apt update && $root_cmd apt upgrade -y
[ "$parent_distro" = 'fedora' ] && $root_cmd upgrade --refresh -y

if [ "$distro" = 'Artix Linux' ]; then
    # TODO: add note on readme that this script assumes your pacman.conf is the latest version (/etc/pacman.conf.pacnew)
    bak '/etc/pacman.conf'

    # enable lib32 repository
    [ "$(grep -w '\[lib32\]' /etc/pacman.conf)" = '#[lib32]' ] && -i sed 's/#[lib32]/[lib32]/' /etc/pacman.conf
    [ "$(grep -wA1 '\[lib32\]' /etc/pacman.conf | tail -1)" = '#Include = /etc/pacman.d/mirrorlist' ] &&
        grep -nwA1 '\[lib32\]' /etc/pacman.conf | tail -1 | cut -d'-' -f1 | $root_cmd xargs -I% sed -i '%s/#//' /etc/pacman.conf

    # enable multilib repository
    [ "$(grep -w '\[multilib\]' /etc/pacman.conf)" = '#[multilib]' ] && sed -i 's/#[multilib]/[multilib]/' /etc/pacman.conf
    [ "$(grep -wA1 '\[multilib\]' /etc/pacman.conf | tail -1)" = '#Include = /etc/pacman.d/mirrorlist-arch' ] &&
        grep -nwA1 '\[multilib\]' /etc/pacman.conf | tail -1 | cut -d'-' -f1 | $root_cmd xargs -I% sed -i '%s/#//' /etc/pacman.conf &&

    $root_cmd pacman -Syy lib32-artix-archlinux-support --noconfirm --needed # add support for lib32 packages (prevents the installation of Systemd as a dependency)
    # TODO: add an echo command for every process (e.g. Updating..., Beginnning installation..., etc.)
fi



check_installable
drivers
[[ "$wine" -eq 1 ]] && wine_install && sed -i '/wine/d' "$cache/not-installable"
[[ "$extra_libraries" -eq 1 ]] && libraries && sed -i '/extra_libraries/d' "$cache/not-installable"
[[ "${pkg_prefs[@]}" =~ 'native' ]] && printf '\nInstalling native packages...\n' && readarray -t pkg_list < "$cache/to-install-native-$parent_distro"
case "$parent_distro" in
    'arch')
        bak '/etc/pacman.conf'
        echo 'Pacman supports parallel downloads. Enabling this would make installing packages faster.'
        while true; do
        echo
        read -p 'Do you wish to enable parallel downloads? [y/n] ' yn
        case "$yn" in
            [Yy]*) echo '[Recommended: 20 for those with fast internet speeds, 5-10 for those with slow internet speeds]'
                read -p 'How many parallel downloads would you like? ' parallel && $root_cmd sed -i "s/#ParallelDownloads = 5/ParallelDownloads = $parallel/" '/etc/pacman.conf'
                break ;;
            [Nn]*) break ;;
            * ) echo 'Please answer "yes" or "no".'
        esac
        done

        # enable multilib repository
        if [ "$distro" != 'Artix' ]; then
            [ "$(grep -w '\[multilib\]' /etc/pacman.conf)" = '#[multilib]' ] && sed -i 's/#[multilib]/[multilib]/' '/etc/pacman.conf'
            [ "$(grep -wA1 '\[multilib\]' /etc/pacman.conf | tail -1)" = '#Include = /etc/pacman.d/mirrorlist' ] &&
            grep -nwA1 '\[multilib\]' '/etc/pacman.conf' | tail -1 | cut -d'-' -f1 | $root_cmd xargs -I% sed -i '%s/#//' '/etc/pacman.conf'
            $root_cmd pacman -Syy --noconfirm
        fi

        $aur_helper -S "${pkg_list[@]}" --noconfirm --needed ;;
    'ubuntu')
        $root_cmd add-apt-repository multiverse -y
        $root_cmd dpkg --add-architecture i386
        $root_cmd update
        $root_cmd apt install "${pkg_list[@]}" -y ;;
    'fedora')
        $root_cmd dnf install fedora-workstation-repositories \
        "https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm" \
        "https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm" -y
        $root_cmd dnf check-update
        $root_cmd dnf install "${pkg_list[@]}" -y
esac
agnostic_installing
fallback
steam_compatibility_tools
[ "$esync" -eq 1 ] && [ "$(ulimit -Hn)" -lt 524288] && esync_enable

#case "$parent_distro" in
#    'arch')
#        #check_installable
#
#        #drivers
#        #[[ "$wine" -eq 1 ]] && wine_install
#        #[[ "$extra_libraries" -eq 1 ]] && libraries
#        # steamtinkerlaunch depends on xxd (a component of vim)
#        [[ "$steamtinkerlaunch" -eq 1 ]] && [ -z "$(command -v vim)" ] && echo 'xxd-standalone' >> "$cache/to-install-native-arch"
#        # Some retroarch data files which don't come with the retroarch package
#        [[ "$retroarch" -eq 1 ]] && printf '\nretroarch-assets-glui\nretroarch-assets-ozone\nretroarch-assets-xmb' >> "$cache/to-install-arch"
#        all ;;
#        #[[ "${pkg_prefs[@]}" =~ 'native' ]] && printf '\nInstalling native packages...\n' && readarray -t pkg_list < "$cache/to-install-native-arch" && \
#        #$aur_helper -S "${pkg_list[@]}" --noconfirm --needed
#        #steam_compatibility_tools
#        #agnostic_installing ;;
#    'ubuntu')
#        $root_cmd add-apt-repository multiverse -y
#        $root_cmd dpkg --add-architecture i386
#        $root_cmd update
#
#        #check_installable
#
#        #drivers
#        #[[ "$wine" -eq 1 ]] && wine_install
#        #[[ "$extra_libraries" -eq 1 ]] && libraries
#        #[[ "${pkg_prefs[@]}" =~ 'native' ]] && printf '\nInstalling native packages...\n' && readarray -t pkg_list < "$cache/to-install-native-ubuntu" && \
#        #$root_cmd apt install "${pkg_list[@]}" -y
#        #steam_compatibility_tools
#        #agnostic_installing ;;
#        all ;;
#    'fedora')
#        $root_cmd dnf install fedora-workstation-repositories \
#            "https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm" \
#            "https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm" -y
#        $root_cmd dnf check-update
#
#        #check_installable
#        #drivers
#        #[[ "$wine" -eq 1 ]] && wine_install
#        #[[ "$extra_libraries" -eq 1 ]] && libraries
#        [[ "$obs_studio" -eq 1 ]] && [[ "$nvidia_proprietary" -eq 1 ]] && echo 'xorg-x11-drv-nvidia-cuda' >> "$cache/to-install-native-fedora"
#        # Some retroarch data files which don't come with the retroarch package
#        [[ "$retroarch" -eq 1 ]] && printf '\nretroarch-freeworld\nretroarch-freeworld-database\nretroarch-freeworld-filters' >> "$cache/to-install-arch"
#        #[[ "${pkg_prefs[@]}" =~ 'native' ]] && printf '\nInstalling native packages...\n' && readarray -t pkg_list < "$cache/to-install-native-fedora" && \
#        #$root_cmd dnf install "${pkg_list[@]}" -y
#        #agnostic_installing
#        #fallback
#        #steam_compatibility_tools
#        all
#        ;;
#esac

$root_cmd rm -rf "$cache"/* # clear the cache
[ -n "$(<$cache/not-installable)" ] && echo 'llgi: error: the following packages could not be installed:' && cat "$cache/not-installable"
printf '\nllgi: installation complete\nPlease reboot your system for the installation to take full affect.\nNOTE: you may encounter some issues if you try to game now without restarting.\n'
